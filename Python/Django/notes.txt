Installed latest Django with:
    pip install Django

Started a Django project with:
    django-admin startproject testSite

To run the project, run in command line:
    python manage.py runserver

Created a new app inside testSite project named testApp:
    python manage.py startapp testApp

Made the testApp urls.py file
Modified the testSite urls.py file

Ran the server, then went to http://127.0.0.1:8000/testApp/

Ran:
    python manage.py migrate
    python manage.py createsuperuser
        username: admin
        email: admin@example.com
        password: arstneio

Renamed main folder to learning_site because it does not matter what the enclosing directory name is.
    Right now, there is testSite folder, which is where all the global settings/parameters for this site exist.
    The testSite/urls.py file points to one application in the testApp folder and its urls.py file.
    The testApp/urls.py configures a blank url to point to 'index'.
    'index' refers to a function defined in testApp/views.py

Had a problem getting templates to work in my testApp.
    Found out I needed to add the app settings class 'testApp.apps.TestappConfig' to the INSTALLED_APPS list in testSite/settings.py.
    I learned this could be shortened to just 'testApp' inside INSTALLED_APPS.

Added a templates folder under testApp with a new folder 'testApp' and an index.html file inside. 
    The inner 'testApp' folder is to ensure it's in a unique namespace, so it must be referred to as 'testApp/index.html'.

Added a static folder under testApp with jquery javascript under a js folder.
    Nothing in the global settings file needed to be changed.
    status.html shows how to load the static jquery javascript
    Django MUST be restarted with runserver command to see changes to static files!

Downloaded the Python 'channels' package through pip
    Needed to restart Django server, otherwise it doesn't see the new package
    Got a 'ModuleNotFoundError: No module named 'win32api' error. A package called 'win32api' doesn't exist through pip.
    Found out 'win32api' package can be downloaded by using 'pywin32' as the name using pip.
    Got the error 'CommandError: You have not set ASGI_APPLICATION, which is needed to run the server.' after installing pywin32 and restarting the server.
    Needed to add 'routing.py' to testApp with the application assignment.
    Also needed to add ASGI_APPLICATION definition to the bottom of settings.py to point to the application assignment above.
    After running the server (the same as before), it now worked with HTTP/2 support not enabled.
    I fixed HTTP/2 support by installing http2 and tls extras for the Twisted library using the command: 
        pip install -U Twisted[tls,http2]

Working on Websockets + RabbitMQ
    Needed channels websocket js in status.html, so I added a source import for channels/js/websocketbridge.js.
    Added a bunch of statements to send and receive messages in the status.coffee file by using channels.WebSocketBridge from websocketbridge.js.
    Added consumers.py to the testApp folder.
    Had a problem with WebSocketBridge object throwing an error in the browser developer tools during send because I was sending a message too quickly after setting up the object since it had not connected yet.
    Solved the problem of pika blocking on waiting for RabbitMQ messages by using Python threading to put it on another thread.
        The threaded message broker still uses the callback to the WebSocketConsumer and this works fine despite running on two different threads.

Setup using built-in Django server logging in consumers.py

Installed selenium for writing browser based unit tests
    pip install selenium
    Created functional_tests.py for selenium tests
    Downloaded 64 bit 'geckodriver.exe' from GitHub and put in at C:\Python36\Scripts to ensure it's in the PATH
    FireFox selenium tests would now work at this point with:
        python functional_tests.py

Worked on creating a separate Python package for RabbitMQ messaging shared among my Python projects
    Put the Python package in C:\Users\mbankston\Documents\UberProject\Python\mq_messaging
    Needed to add C:\Users\mbankston\Documents\UberProject\Python to the PYTHONPATH
        In User PYTHONPATH, and needed to restart Visual Studio Code for it to take effect.


